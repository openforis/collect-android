/**
 * Copyright (c) 2009-2012, Lukas Eder, lukas.eder@gmail.com
 * All rights reserved.
 *
 * This software is licensed to you under the Apache License, Version 2.0
 * (the "License"); You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * . Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * . Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * . Neither the name "jOOQ" nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package org.jooq.impl;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import javax.sql.DataSource;

import org.jooq.tools.jdbc.JDBC41Statement;

/**
 * A {@link DataSource}-enabled statement.
 *
 * @author Lukas Eder
 * @see DataSourceConnection
 */
class DataSourceStatement extends JDBC41Statement implements Statement {

    private final DataSourceConnection connection;
    private final Statement statement;

    DataSourceStatement(DataSourceConnection connection, Statement statement) {
        this.connection = connection;
        this.statement = statement;
    }

    /**
     * Subclasses may override this method
     */
    Statement getDelegate() {
        return statement;
    }

    // ------------------------------------------------------------------------
    // XXX Closing the Statement
    // ------------------------------------------------------------------------

    @Override
    public final void close() throws SQLException {
        try {
            getDelegate().close();
        }
        finally {
            if (connection.getDataSource() != null) {
                connection.close();
            }
        }
    }

    // ------------------------------------------------------------------------
    // XXX Executing the statement
    // ------------------------------------------------------------------------

    @Override
    public final boolean execute(String sql) throws SQLException {
        return getDelegate().execute(sql);
    }

    @Override
    public final boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return getDelegate().execute(sql, autoGeneratedKeys);
    }

    @Override
    public final boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return getDelegate().execute(sql, columnIndexes);
    }

    @Override
    public final boolean execute(String sql, String[] columnNames) throws SQLException {
        return getDelegate().execute(sql, columnNames);
    }

    @Override
    public final int[] executeBatch() throws SQLException {
        return getDelegate().executeBatch();
    }

    @Override
    public final ResultSet executeQuery(String sql) throws SQLException {
        return getDelegate().executeQuery(sql);
    }

    @Override
    public final int executeUpdate(String sql) throws SQLException {
        return getDelegate().executeUpdate(sql);
    }

    @Override
    public final int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return getDelegate().executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public final int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return getDelegate().executeUpdate(sql, columnIndexes);
    }

    @Override
    public final int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return getDelegate().executeUpdate(sql, columnNames);
    }

    // ------------------------------------------------------------------------
    // XXX Other methods
    // ------------------------------------------------------------------------

    @Override
    public final <T> T unwrap(Class<T> iface) throws SQLException {
        return getDelegate().unwrap(iface);
    }

    @Override
    public final boolean isWrapperFor(Class<?> iface) throws SQLException {
        return getDelegate().isWrapperFor(iface);
    }

    @Override
    public final int getMaxFieldSize() throws SQLException {
        return getDelegate().getMaxFieldSize();
    }

    @Override
    public final void setMaxFieldSize(int max) throws SQLException {
        getDelegate().setMaxFieldSize(max);
    }

    @Override
    public final int getMaxRows() throws SQLException {
        return getDelegate().getMaxRows();
    }

    @Override
    public final void setMaxRows(int max) throws SQLException {
        getDelegate().setMaxRows(max);
    }

    @Override
    public final void setEscapeProcessing(boolean enable) throws SQLException {
        getDelegate().setEscapeProcessing(enable);
    }

    @Override
    public final int getQueryTimeout() throws SQLException {
        return getDelegate().getQueryTimeout();
    }

    @Override
    public final void setQueryTimeout(int seconds) throws SQLException {
        getDelegate().setQueryTimeout(seconds);
    }

    @Override
    public final void cancel() throws SQLException {
        getDelegate().cancel();
    }

    @Override
    public final SQLWarning getWarnings() throws SQLException {
        return getDelegate().getWarnings();
    }

    @Override
    public final void clearWarnings() throws SQLException {
        getDelegate().clearWarnings();
    }

    @Override
    public final void setCursorName(String name) throws SQLException {
        getDelegate().setCursorName(name);
    }

    @Override
    public final ResultSet getResultSet() throws SQLException {
        return getDelegate().getResultSet();
    }

    @Override
    public final int getUpdateCount() throws SQLException {
        return getDelegate().getUpdateCount();
    }

    @Override
    public final boolean getMoreResults() throws SQLException {
        return getDelegate().getMoreResults();
    }

    @Override
    public final void setFetchDirection(int direction) throws SQLException {
        getDelegate().setFetchDirection(direction);
    }

    @Override
    public final int getFetchDirection() throws SQLException {
        return getDelegate().getFetchDirection();
    }

    @Override
    public final void setFetchSize(int rows) throws SQLException {
        getDelegate().setFetchSize(rows);
    }

    @Override
    public final int getFetchSize() throws SQLException {
        return getDelegate().getFetchSize();
    }

    @Override
    public final int getResultSetConcurrency() throws SQLException {
        return getDelegate().getResultSetConcurrency();
    }

    @Override
    public final int getResultSetType() throws SQLException {
        return getDelegate().getResultSetType();
    }

    @Override
    public final void addBatch(String sql) throws SQLException {
        getDelegate().addBatch(sql);
    }

    @Override
    public final void clearBatch() throws SQLException {
        getDelegate().clearBatch();
    }

    @Override
    public final Connection getConnection() throws SQLException {
        return getDelegate().getConnection();
    }

    @Override
    public final boolean getMoreResults(int current) throws SQLException {
        return getDelegate().getMoreResults(current);
    }

    @Override
    public final ResultSet getGeneratedKeys() throws SQLException {
        return getDelegate().getGeneratedKeys();
    }

    @Override
    public final int getResultSetHoldability() throws SQLException {
        return getDelegate().getResultSetHoldability();
    }

    @Override
    public final boolean isClosed() throws SQLException {
        return getDelegate().isClosed();
    }

    @Override
    public final void setPoolable(boolean poolable) throws SQLException {
        getDelegate().setPoolable(poolable);
    }

    @Override
    public final boolean isPoolable() throws SQLException {
        return getDelegate().isPoolable();
    }
}
